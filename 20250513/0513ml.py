# -*- coding: utf-8 -*-
"""0513ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iKeaAJBkUxPLD075-m6NiQhAroahUH-z

x계수가 여러개일때 상관관계를 제거하기 위해 l1(랏소),l2(릿지) 정규화
독립 변수가 2개 이상인 경우,
특히 변수 간 상관관계(다중공선성, multicollinearity 등) 문제를 완화하고
특성별 가중치를 적절히 반영하기 위해 사용
릿지: 산등성이 0으로 만드는게 아니라 다양한 변수를 사용해서
랏소: 올가미 절대값을 패널티로 사용한다 일부변수를 0으로만드는 알고리즘
loss = 1/n(y-(ax+b))^2
            w1x1+w2x2+b
loss = mse + l1 정규화 = mse + 시크마 절대값 wi
엘라스틱넷: l1,l2의 결합
(특성 값이 하나면 mse,변수가 2개 이상이면 둘 사이에 비율을 조정하기 위해 l1,ㅣ2를 사용함 mse의 공식과 시그마wi 공식이 같아지는 지점 mse는 0이 되면 좋지만 둘 사이에 로스를 조정한다)
fit_transform 처음 조정할때
transform 학습된 모델을 조정할대
모델이 복잡해지면 예측력이 떨어짐 degree=2
polynominal 다항식(곡선)
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.datasets import fetch_california_housing
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
import pandas as pd

housing = fetch_california_housing()

housing_df = pd.DataFrame(housing.data, columns = housing. feature_names)
housing_df['Price'] = housing.target
housing_df.head()

from math import degrees
X_train,X_test,y_train,y_test = train_test_split(housing.data,housing.target,test_size=0.2)

model = make_pipeline(PolynomialFeatures(degree = 2),
                      StandardScaler(),
                      LinearRegression())
model.fit(X_train, y_train)

# Polynominal Regression
print("Training Data evaluation: {}".format(model.score(X_train,y_train)))
print("Test Data valuation: {}".format(model.score(X_test,y_test)))
# score : 주어진 데이터에 대한 모델의 예측 정확성이나 설명력을 측정

# Diabetes Dataset
from sklearn.datasets import load_diabetes

data = load_diabetes()
X, y = data.data, data.target

diabetes_df = pd.DataFrame(X, columns=data.feature_names)
diabetes_df['degree'] = y

print(diabetes_df.head())

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import r2_score

X_train,X_test,y_train,y_test = train_test_split(data.data,data.target,test_size=0.2)

# 랏소 리그레션
from sklearn.linear_model import Ridge, Lasso

param_grid = {'alpha': [0.001, 0.01, 0.1, 1, 10, 1000]}
lasso = Lasso(max_iter=10000)
grid = GridSearchCV(lasso, param_grid, cv=5)
grid.fit(X_train, y_train)



print("Lasso Best alpha:", grid.best_params_['alpha'])
print("Lasso Best R² (train CV):", grid.best_score_)

# 테스트 세트에서 R²
y_pred = grid.predict(X_test)
print("Lasso R² on test set:", r2_score(y_test, y_pred))

from sklearn.linear_model import Ridge

param_grid = {'alpha': [0.001, 0.01, 0.1, 1, 10, 1000]}
ridge = Ridge()
grid = GridSearchCV(ridge, param_grid, cv=5)
grid.fit(X_train, y_train)

print("Ridge Best alpha:", grid.best_params_['alpha'])
print("Ridge Best R² (train CV):", grid.best_score_)

y_pred = grid.predict(X_test)
print("Ridge R² on test set:", r2_score(y_test, y_pred))

from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler, RobustScaler
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.metrics import mean_squared_error
import pandas as pd
import numpy as np

# 1. 데이터 로드 및 분할
X, y = load_diabetes(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. 공통 요소
scalers = [StandardScaler(), MinMaxScaler(), RobustScaler()]
degrees = [1, 2, 3]
alphas = [0.001, 0.01, 0.1, 1, 10, 1000]
l1_ratios = [0.1, 0.5, 0.9]

# 3. 모델 및 하이퍼파라미터 구성
model_configs = [
    {
        'name': 'LinearRegression',
        'model': LinearRegression(),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [LinearRegression()]
        }
    },
    {
        'name': 'Ridge',
        'model': Ridge(),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [Ridge()],
            'model__alpha': alphas
        }
    },
    {
        'name': 'Lasso',
        'model': Lasso(max_iter=10000),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [Lasso(max_iter=10000)],
            'model__alpha': alphas
        }
    },
    {
        'name': 'ElasticNet',
        'model': ElasticNet(max_iter=10000),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [ElasticNet(max_iter=10000)],
            'model__alpha': alphas,
            'model__l1_ratio': l1_ratios
        }
    },

]
param_grid = {
    'poly__degree': [2, 3],
    'scaler': [StandardScaler()],
    'model': [LinearRegression()]
}

# 4. 결과 저장용 리스트
results = []

# 5. 모델별로 실험 및 기록
for config in model_configs:
    pipe = Pipeline([
        ('poly', PolynomialFeatures()),
        ('scaler', StandardScaler()),  # 임시, GridSearchCV에서 교체
        ('model', config['model'])
    ])

    grid = GridSearchCV(pipe, config['param_grid'], cv=5,
                        scoring='neg_mean_squared_error', n_jobs=-1)
    grid.fit(X_train, y_train)

    # 예측 및 RMSE 계산
    best_model = grid.best_estimator_
    train_rmse = np.sqrt(mean_squared_error(y_train, best_model.predict(X_train)))
    test_rmse = np.sqrt(mean_squared_error(y_test, best_model.predict(X_test)))

# 결과 정리
    result = {
        'Model': config['name'],
        'Train RMSE': round(train_rmse, 3),
        'Test RMSE': round(test_rmse, 3),
        'Best Degree': grid.best_params_.get('poly__degree'),
        'Scaler': type(grid.best_params_.get('scaler')).__name__,
        'Alpha': grid.best_params_.get('model__alpha', '—'),
        'L1 Ratio': grid.best_params_.get('model__l1_ratio', '—')
    }
    results.append(result)

# 6. 결과 출력
df_results = pd.DataFrame(results)
print(df_results)

from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error
import pandas as pd
import numpy as np

# 1. 데이터 로딩 및 분할
X, y = load_diabetes(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 2. 파이프라인 구성
model = make_pipeline(
    PolynomialFeatures(degree=2),
    StandardScaler(),
    LinearRegression()
)

# 3. 모델 학습
model.fit(X_train, y_train)

# 4. 예측 및 성능 평가
train_pred = model.predict(X_train)
test_pred = model.predict(X_test)

train_rmse = np.sqrt(mean_squared_error(y_train, train_pred))
test_rmse = np.sqrt(mean_squared_error(y_test, test_pred))

# 5. 결과 표 생성
results_df = pd.DataFrame([{
    'Model': 'LinearRegression (degree=2)',
    'Train RMSE': round(train_rmse, 3),
    'Test RMSE': round(test_rmse, 3),
    'Best Degree': 2,
    'Scaler': 'StandardScaler',
    'Alpha': '—',
    'L1 Ratio': '—'
}])

# 6. 출력
print(results_df)

from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler, RobustScaler
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.metrics import mean_squared_error
import pandas as pd
import numpy as np

# 데이터 로드
X, y = load_diabetes(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 실험 대상 alpha와 l1_ratio
scalers = [StandardScaler(), MinMaxScaler(), RobustScaler()]
degrees = [1, 2, 3]
alphas = [0.001, 0.01, 0.1, 1, 10, 1000]
l1_ratios = [0.1, 0.5, 0.9]

# 모델 및 그리드 설정
model_defs = [
    {
        'name': 'LinearRegression',
        'model': LinearRegression(),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [LinearRegression()]
        }
    },
    {
        'name': 'Ridge',
        'model': Ridge(),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [Ridge()],
            'model__alpha': alphas
        }
    },
    {
        'name': 'Lasso',
        'model': Lasso(max_iter=10000),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [Lasso(max_iter=10000)],
            'model__alpha': alphas
        }
    },
    {
        'name': 'ElasticNet',
        'model': ElasticNet(max_iter=10000),
        'param_grid': {
            'poly__degree': degrees,
            'scaler': scalers,
            'model': [ElasticNet(max_iter=10000)],
            'model__alpha': alphas,
            'model__l1_ratio': l1_ratios
        }
    }
]

# 결과 저장
rows = []

for config in model_defs:
    name = config['name']
    model = config['model']
    param_grid = config['param_grid']

    pipe = Pipeline([
        ('poly', PolynomialFeatures(degree=1)),
        ('scaler', StandardScaler()),
        ('model', model)
    ])

    grid = GridSearchCV(pipe, param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
    grid.fit(X_train, y_train)

    df = pd.DataFrame(grid.cv_results_)
    for _, row in df.iterrows():
        rows.append({
            'Model': name,
            'Alpha': row.get('param_model__alpha', '—'),
            'L1 Ratio': row.get('param_model__l1_ratio', '—'),
            'Degree': row.get('param_poly__degree', '—'),
            'Scaler': type(row.get('param_scaler')).__name__ if row.get('param_scaler', None) != 'passthrough' else 'None',
            'RMSE': round(np.sqrt(-row['mean_test_score']), 3)
        })

# 결과 표 생성
df_alpha_table = pd.DataFrame(rows)
df_alpha_table = df_alpha_table.sort_values(by=['Model', 'Alpha', 'L1 Ratio', 'Degree', 'Scaler'])

# 모든 행 출력 설정
pd.set_option('display.max_rows', None)

# 데이터프레임 출력
print(df_alpha_table)

from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures, StandardScaler, MinMaxScaler, RobustScaler
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.metrics import mean_squared_error
import pandas as pd
import numpy as np

# 데이터 로드
X, y = load_diabetes(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 실험 대상 alpha와 l1_ratio

degrees = [1, 2, 3]
alphas = [0.001, 0.01, 0.1, 1, 10, 1000]
l1_ratios = [0.1, 0.5, 0.9]

# 모델 및 그리드 설정
model_defs = [
    {
        'name': 'LinearRegression',
        'model': LinearRegression(),
        'param_grid': {
            'poly__degree': degrees,

            'model': [LinearRegression()]
        }
    },
    {
        'name': 'Ridge',
        'model': Ridge(),
        'param_grid': {
            'poly__degree': degrees,

            'model': [Ridge()],
            'model__alpha': alphas
        }
    },
    {
        'name': 'Lasso',
        'model': Lasso(max_iter=10000),
        'param_grid': {
            'poly__degree': degrees,

            'model': [Lasso(max_iter=10000)],
            'model__alpha': alphas
        }
    },
    {
        'name': 'ElasticNet',
        'model': ElasticNet(max_iter=10000),
        'param_grid': {
            'poly__degree': degrees,

            'model': [ElasticNet(max_iter=10000)],
            'model__alpha': alphas,
            'model__l1_ratio': l1_ratios
        }
    }
]

# 결과 저장
rows = []

for config in model_defs:
    name = config['name']
    model = config['model']
    param_grid = config['param_grid']

    pipe = Pipeline([
        ('poly', PolynomialFeatures(degree=1)),

        ('model', model)
    ])

    grid = GridSearchCV(pipe, param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
    grid.fit(X_train, y_train)

    df = pd.DataFrame(grid.cv_results_)
    for _, row in df.iterrows():
        rows.append({
            'Model': name,
            'Alpha': row.get('param_model__alpha', '—'),
            'L1 Ratio': row.get('param_model__l1_ratio', '—'),
            'Degree': row.get('param_poly__degree', '—'),
            'Scaler': type(row.get('param_scaler')).__name__ if row.get('param_scaler', None) != 'passthrough' else 'None',
            'RMSE': round(np.sqrt(-row['mean_test_score']), 3)
        })

# 결과 표 생성
df_alpha_table = pd.DataFrame(rows)
df_alpha_table = df_alpha_table.sort_values(by=['Model', 'Alpha', 'L1 Ratio', 'Degree', 'Scaler'])

# 모든 행 출력 설정
pd.set_option('display.max_rows', None)

# 데이터프레임 출력
print(df_alpha_table)

