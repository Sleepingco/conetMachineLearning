# -*- coding: utf-8 -*-
"""FrozenLake

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d-d9auqJXwJnOwZs68AlV64NHLJKDFE3
"""

! pip install gymnasium

! pip install pygame

import gymnasium as gym

env = gym.make("FrozenLake-v1")
state, info = env.reset()

print("초기상태(위치)",state)
print("info 딕셔너리:",info)

"""obs, info = env.reset() 환경을 초기화합니다.
반환값은 두 가지:
state: 초기 상태(state), 예: 0
info: 추가 정보가 담긴 딕셔너리. 예: {'prob': 1.0} (시작 상태의 확률 등)
prob는 이 상태에 도달할 확률 (100%로 초기 상태이므로 1.0)
"""

env = gym.make("FrozenLake-v1",is_slippery=False,render_mode="ansi") # slippery 미끄러진다 true는 랜덤성 발생
obs,info = env.reset()
print(env.render())

"""FrozenLake-v1: 4x4 얼어붙은 호수 맵 (기본 환경)
is_slippery=False: 미끄럽지 않은 환경 → 에이전트가 의도한 방향으로 정확하게 이동
render_mode="ansi":텍스트 기반 맵을 문자열로 출력.
"human"은 GUI, "ansi"는 콘솔용입니다.
"""

env = gym.make("FrozenLake-v1",is_slippery=False,render_mode="ansi") # 텍스트 기반 출력 모드 설정
state, info = env.reset()
for i in range(100):
  print(env.render()) # 현재상태 출력
  print(i)

  action = env.action_space.sample() # 랜덤 액션 선택 (탐색 에이전트 대체)
  next_state, reward, terminated, truncated, info = env.step(action) # 한 스텝 전진
  print("next state : ", next_state)
  if terminated or truncated: # 종료 조건
    print("Episode finished!")
    break
env.close()



import gymnasium as gym

# create env
env = gym.make("FrozenLake-v1",map_name="4x4",is_slippery=False)

# reset
state, info = env.reset()
# Macros
LEFT =0
DOWN=1
RIGHT=2
UP=3
# KeyboardMappring
arrow_keys={
    'w':UP,
    's':DOWN,
    'd':RIGHT,
    'a':LEFT
}

# 상태 출력 함수(4x4 grid)
def print_state(state):
  state_desc = env.unwrapped.desc.tolist()
  state_desc = [[c.decode('utf-8')for c in line] for line in state_desc]
  row,col = divmod(state,4)
  state_desc[row][col] = 'P' # current loc
  for line in state_desc:
    print("".join(line))
  print()
print("Use 'w','a','s','d' keys to move the agent.")
print('Press "q" tp quit the game. \n')

print("initial state")
print_state(state)

while True:
  key = input("Enter action (w/a/s/d): ").strip().lower()
  if key == 'q':
    print("Game aborted")
    break
  if key not in arrow_keys:
    print('invaild key. Use "w","a","s","d"')
    continue

  action = arrow_keys[key]
  next_state,reward,terminated,truncated,info =  env.step(action)

  # 결과 출력
  action_names = {
                    UP:'UP',
                    DOWN:'DOWN',
                    LEFT:'LEFT',
                    RIGHT:"RIGHT",
                  }
  print(f"\nAction:{action_names[action]},State:{next_state},Reward:{reward},Info{info}")

  print("Current state")
  print_state(next_state)
  state = next_state

  if terminated or truncated:
      if reward == 1.0:
        print("Congratulations! You reached the goal!")
      else:
        print("Game over. You fell into a hole.")
      break
print("Game ended")

"""print_state(state) 함수:현재 상태를 4x4 그리드 문자열로 시각화.
env.unwrapped.desc: 맵 설명(바이트 배열). 예: S(시작), F(얼음), H(구멍), G(목표).
tolist(): 바이트 배열을 리스트로 변환.
decode('utf-8'): 바이트를 문자열로 변환(예: b'S' → ‘S’)
바이트 형태의 맵 정보 (b'S', b'F' 등)를 리스트로 변환, 이후 UTF8로 변경

while 루프를 사용하여 사용자 입력을 처리합니다.
사용자가 'q'를 입력하면 게임을 종료합니다.
사용자가 이동 키('w', 'a', 's', 'd') 입력하면 이동합니다.
env.step(action)을 사용하여
상태, 보상, 종료 여부, 추가 정보를 업데이트합니다.
현재 상태를 출력하고, 게임 종료 조건을 확인합니다.
"""