# -*- coding: utf-8 -*-
"""UnsuoervisedLearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TXMh7bnI19kcvqPixgt-l4uqOqQGYxPw
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

X,y = make_blobs(n_samples=500,centers=4,cluster_std=0.6,random_state=0)

kmeans = KMeans(n_clusters=4,random_state=0).fit(X)

print("Labels::",kmeans.labels_)

print("Cluster centers:",kmeans.cluster_centers_)

plt.figure(figsize=(10,7))
plt.scatter(X[:,0],X[:,1],c=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=100,c='r',marker='x')
plt.title("K-Means Clustering")
plt.xlabel("X")
plt.ylabel("Y")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

X = np.array([[35, 50000], [45, 85000], [25, 35000],
[30, 60000], [55, 100000], [40, 70000],
[60, 90000], [50, 80000], [35, 55000]])

kmeans = KMeans(n_clusters=3 ,random_state=0).fit(X)

print("Labels:",kmeans.labels_)
print("Cluster center:",kmeans.cluster_centers_)

plt.scatter(X[:,0],X[:,1],c=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],s=300,c='r',marker='*',label='Centroids')
plt.title("K-Means Customer Segmentation")
plt.xlabel("Age")
plt.ylabel("Annual Income($)")
plt.legend()
plt.show()

import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

# 거래 데이터 정의
transactions = [
    ['bread', 'milk'],
    ['bread', 'jam', 'milk'],
    ['beer', 'cola'],
    ['bread', 'milk', 'cola'],
    ['milk', 'cola', 'eggs']
]

# 정확한 원핫 인코딩 (아이템 기준)
te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df = pd.DataFrame(te_ary, columns=te.columns_)

df



# 빈발 항목 집합 추출
frequent_itemsets = apriori(df, min_support=0.2, use_colnames=True)

# 연관 규칙 생성
rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.6)

# 결과 출력
print("✅ [One-hot Encoding된 거래 데이터]")
print(df)
print("\n✅ [연관 규칙 결과]")
print(rules)

import numpy as np
import pandas as pd

# 랜덤 데이터 생성 (정상 거래)
np.random.seed(42)
transaction_amounts = np.random.normal(100,20,1000)
transaction_times = np.random.normal(15,5,1000)
# 몇몇 이상치 추가
anomalous_amounts = np.random.uniform(300,500,50)
anomalous_times = np.random.uniform(30,50,50)
# 정상 거래와 이상치 데이터 합치기
amounts = np.concatenate([transaction_amounts,anomalous_amounts])
times = np.concatenate([transaction_times,anomalous_times])
# 데이터프레임 생성
df = pd.DataFrame({'amount':amounts,'time':times})

from sklearn.ensemble import IsolationForest
# Isolation Forest 모델 생성 및 학습
model = IsolationForest(contamination=0.05,random_state=42)
model.fit(df)
# 이상치 예측
df['is_outlier'] = model.predict(df)
# 이상치는 -1, 정상치는 1로 표시됨
df['is_outlier'] = df['is_outlier'].map({1:'normal',-1:"outlier"})
# 결과 출력
print(df['is_outlier'].value_counts())
print(df.head())

from sklearn.neighbors import LocalOutlierFactor
# LOF 모델 생성 및 학습
lof = LocalOutlierFactor(n_neighbors=20, contamination=0.05)
df['lof_outlier'] = lof.fit_predict(df[['amount', 'time']])
# 이상치는 -1, 정상치는 1로 표시됨
df['lof_outlier'] = df['lof_outlier'].map({1: 'normal', -1: 'outlier'})
# 결과 출력
print(df['lof_outlier'].value_counts())
print(df.head())

import matplotlib.pyplot as plt

plt.figure(figsize=(10,5))
plt.scatter(df['amount'],df['time'],c=df['is_outlier'].map({'normal':'b','outlier':'r'}))
plt.xlabel("Transaction Amount")
plt.ylabel('Transaction Time')
plt.title("Isolation Forest Outlier Detection")
plt.show()

plt.figure(figsize=(10,5))
plt.scatter(df['amount'],df['time'],c=df['lof_outlier'].map({'normal':'b','outlier':'r'}))
plt.xlabel("Transaction Amount")
plt.ylabel('Transaction Time')
plt.title('Local Outlier Factor (LOF) Outlier Detection')

plt.show()